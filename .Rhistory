hi
m <- cbind(1, 1:7) # the '1' (= shorter vector) is recycled
m
m <- cbind(m, 8:14)[, c(1, 3, 2)] # insert a column
m
m0 <- matrix(NA, 4, 0)
rownames(m0)
m)
m0
summarize(m0)
summarize(m)
summarize
summary(m)
summary(m0)
# ronaVote
# Regressing panel data on COVID outcomes on 2020 election data
library(data.table)
library(broom)
library(tidyverse)
setwd("~/git/ronaVote")
# GET DATA, REMOVE ROWS W/ UNKNOWN FIPS, CONVERT>WEEKLY OBSERVATIONS --------  later: pad fips with zeroes
# GET DATA
getData <- function(){
pathRona <- "~/git/ronaVote/data/rona/NYT/us-counties.csv"
pathArea <- "~/git/ronaVote/data/rona/CountiesLandArea/LND01.csv"
pathPop <-  "~/git/ronaVote/data/rona/USDA_PopulationData/PopEst2019.csv"
pathVote <- "~/git/ronaVote/data/vote/NYT/presidential.csv"
ronaDays <- fread(pathRona, select = grep(        "fips|date|cases",
names(fread(pathRona, nrow = 0L))))
ronaDays <- rename(ronaDays, casesTot = cases)    # renamed "cases" to "casesTot"
area <- fread(pathArea, select = grep(            "fips|mi2",
names(fread(pathArea, nrow = 0L))))
popu <- fread(pathPop, select = grep(             "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(            "fips|margin2020|votes$",
names(fread(pathVote, nrow = 0L))))
return(list(ronaDays=ronaDays, area=area, popu=popu, vote=vote))
}
rawData <- getData()
# REMOVE OBSERVATIONS WITH UNKNOWN COUNTY FIPS
rawData <- rawData %>%
map(function(x) { filter(x, !is.na(fips)) })
# DAYS TO WEEKS
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%    # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                                 # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%               # Reconstruct uniform dates for all rows in each week
mutate(week_DateT = paste("T", gsub("-", "_", weekDate), sep="")) %>%         # for casesDiff row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(week_DateW = paste("W", gsub("-", "_", weekDate), sep="")) %>%         # for casesTot row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(fips2 = paste("x", fips, sep = ""))                                    # for col or row names
weekDates <- distinct(ronaTall, week_DateT, week_DateW, weekDate) #THIS IS NEW
fips_fips2 <- distinct(ronaTall, fips, fips2, .keep_all = FALSE)                # keep fips fips2 dictionary
# TIDY casesTot: WIDEN, NA'S-TO-ZEROES -----------------------------------------
ronaSectionsTot <- ronaTall  %>%                                                # WIDEN FOR COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = fips2,
names_from = week_DateT,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("T"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
ronaSeriesesTot <- ronaTall  %>%                                                # WIDEN FOR COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = week_DateW,
names_from = fips2,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("x"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
# DIFF SERIES, TRANSPOSE TO SECTIONS, JOIN -------------------------------------
# DIFF SERIES
diffit <- function(x) { {{x}} - lag({{x}}) }
ronaDiff <- ronaSeriesesTot %>%
mutate(across(starts_with("x"), ~diffit(.) ))
# TRANSPOSE ronaDiff TO SECTIONS, JOIN TO MAKE rona
ronaAllSections <- ronaDiff %>%
pivot_longer(cols = starts_with("x"), names_to = "fips2") %>%
pivot_wider(id_cols = fips2,
names_from = week_DateW,
values_from = "value") %>%
left_join(ronaSectionsTot, by="fips2") %>%
left_join(fips_fips2, by = "fips2") %>%
column_to_rownames(var = "fips2") %>%
left_join(rawData[["popu"]], by="fips") %>%
left_join(rawData[["area"]], by="fips") %>%
left_join(rawData[["vote"]], by="fips") # %>%
rm(fips_fips2, rawData, ronaSectionsTot, ronaSeriesesTot, ronaTall) #, ronaDiff)
# REMOVE OBSERVATIONS WITH pop2019 == NA
ronaAllSections <- ronaAllSections %>% filter(is.na(pop2019))
# CONSTRUCT CALCULATED VARIABLES INCLUDING CASES-PER-CAPITA --------------------
rona <- ronaAllSections %>%
mutate(mi2 = ifelse(mi2 == 0, NA, mi2)) %>%               # area in sq. mi.   # ?? WHAT ARE THE ZERO-AREA COUNTIES ??
mutate(popMi2 = (pop2019 / mi2)) %>%                      # pop / sq. mi/     # Calculate population density of counties
mutate(across(starts_with("T"), function(x) {x/pop2019/100000} )) %>%         # Make total cases / 100,000 population variables
mutate(across(starts_with("W"), function(x) {x/pop2019/100000} ))         # "    (weekly new cases)  "     "      "
?histogram
?ggplot2
# HISTOGRAM OF ELECTION MARGINS BY POPULATION
rona %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019))
# HISTOGRAM OF ELECTION MARGINS BY POPULATION
rona %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram()
# HISTOGRAM OF ELECTION MARGINS BY POPULATION
rona %>% ggplot(aes(x = margin2020)) + geom_histogram()
str(rona$margin2020)
rona$margin2020
# ronaVote
# Regressing panel data on COVID outcomes on 2020 election data
library(data.table)
library(broom)
library(tidyverse)
setwd("~/git/ronaVote")
# GET DATA, REMOVE ROWS W/ UNKNOWN FIPS, CONVERT>WEEKLY OBSERVATIONS --------  later: pad fips with zeroes
# GET DATA
getData <- function(){
pathRona <- "~/git/ronaVote/data/rona/NYT/us-counties.csv"
pathArea <- "~/git/ronaVote/data/rona/CountiesLandArea/LND01.csv"
pathPop <-  "~/git/ronaVote/data/rona/USDA_PopulationData/PopEst2019.csv"
pathVote <- "~/git/ronaVote/data/vote/NYT/presidential.csv"
ronaDays <- fread(pathRona, select = grep(        "fips|date|cases",
names(fread(pathRona, nrow = 0L))))
ronaDays <- rename(ronaDays, casesTot = cases)    # renamed "cases" to "casesTot"
area <- fread(pathArea, select = grep(            "fips|mi2",
names(fread(pathArea, nrow = 0L))))
popu <- fread(pathPop, select = grep(             "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(            "fips|margin2020|votes$",
names(fread(pathVote, nrow = 0L))))
return(list(ronaDays=ronaDays, area=area, popu=popu, vote=vote))
}
rawData <- getData()
# REMOVE OBSERVATIONS WITH UNKNOWN COUNTY FIPS
rawData <- rawData %>%
map(function(x) { filter(x, !is.na(fips)) })
# DAYS TO WEEKS
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%    # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                                 # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%               # Reconstruct uniform dates for all rows in each week
mutate(week_DateT = paste("T", gsub("-", "_", weekDate), sep="")) %>%         # for casesDiff row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(week_DateW = paste("W", gsub("-", "_", weekDate), sep="")) %>%         # for casesTot row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(fips2 = paste("x", fips, sep = ""))                                    # for col or row names
weekDates <- distinct(ronaTall, week_DateT, week_DateW, weekDate) #THIS IS NEW
fips_fips2 <- distinct(ronaTall, fips, fips2, .keep_all = FALSE)                # keep fips fips2 dictionary
# TIDY casesTot: WIDEN, NA'S-TO-ZEROES -----------------------------------------
ronaSectionsTot <- ronaTall  %>%                                                # WIDEN FOR COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = fips2,
names_from = week_DateT,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("T"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
ronaSeriesesTot <- ronaTall  %>%                                                # WIDEN FOR COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = week_DateW,
names_from = fips2,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("x"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
# DIFF SERIES, TRANSPOSE TO SECTIONS, JOIN -------------------------------------
# DIFF SERIES
diffit <- function(x) { {{x}} - lag({{x}}) }
ronaDiff <- ronaSeriesesTot %>%
mutate(across(starts_with("x"), ~diffit(.) ))
# TRANSPOSE ronaDiff TO SECTIONS, JOIN TO MAKE rona
ronaAllSections <- ronaDiff %>%
pivot_longer(cols = starts_with("x"), names_to = "fips2") %>%
pivot_wider(id_cols = fips2,
names_from = week_DateW,
values_from = "value") %>%
left_join(ronaSectionsTot, by="fips2") %>%
left_join(fips_fips2, by = "fips2") %>%
column_to_rownames(var = "fips2") %>%
left_join(rawData[["popu"]], by="fips") %>%
left_join(rawData[["area"]], by="fips") %>%
left_join(rawData[["vote"]], by="fips") # %>%
rm(fips_fips2, rawData, ronaSectionsTot, ronaSeriesesTot, ronaTall) #, ronaDiff)
# REMOVE OBSERVATIONS WITH pop2019 == NA
ronaAllSections <- ronaAllSections %>% filter(-is.na(pop2019))
# ronaVote
# Regressing panel data on COVID outcomes on 2020 election data
library(data.table)
library(broom)
library(tidyverse)
setwd("~/git/ronaVote")
# GET DATA, REMOVE ROWS W/ UNKNOWN FIPS, CONVERT>WEEKLY OBSERVATIONS --------  later: pad fips with zeroes
# GET DATA
getData <- function(){
pathRona <- "~/git/ronaVote/data/rona/NYT/us-counties.csv"
pathArea <- "~/git/ronaVote/data/rona/CountiesLandArea/LND01.csv"
pathPop <-  "~/git/ronaVote/data/rona/USDA_PopulationData/PopEst2019.csv"
pathVote <- "~/git/ronaVote/data/vote/NYT/presidential.csv"
ronaDays <- fread(pathRona, select = grep(        "fips|date|cases",
names(fread(pathRona, nrow = 0L))))
ronaDays <- rename(ronaDays, casesTot = cases)    # renamed "cases" to "casesTot"
area <- fread(pathArea, select = grep(            "fips|mi2",
names(fread(pathArea, nrow = 0L))))
popu <- fread(pathPop, select = grep(             "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(            "fips|margin2020|votes$",
names(fread(pathVote, nrow = 0L))))
return(list(ronaDays=ronaDays, area=area, popu=popu, vote=vote))
}
rawData <- getData()
# REMOVE OBSERVATIONS WITH UNKNOWN COUNTY FIPS
rawData <- rawData %>%
map(function(x) { filter(x, !is.na(fips)) })
# DAYS TO WEEKS
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%    # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                                 # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%               # Reconstruct uniform dates for all rows in each week
mutate(week_DateT = paste("T", gsub("-", "_", weekDate), sep="")) %>%         # for casesDiff row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(week_DateW = paste("W", gsub("-", "_", weekDate), sep="")) %>%         # for casesTot row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(fips2 = paste("x", fips, sep = ""))                                    # for col or row names
weekDates <- distinct(ronaTall, week_DateT, week_DateW, weekDate) #THIS IS NEW
fips_fips2 <- distinct(ronaTall, fips, fips2, .keep_all = FALSE)                # keep fips fips2 dictionary
# TIDY casesTot: WIDEN, NA'S-TO-ZEROES -----------------------------------------
ronaSectionsTot <- ronaTall  %>%                                                # WIDEN FOR COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = fips2,
names_from = week_DateT,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("T"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
ronaSeriesesTot <- ronaTall  %>%                                                # WIDEN FOR COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = week_DateW,
names_from = fips2,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("x"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
# DIFF SERIES, TRANSPOSE TO SECTIONS, JOIN -------------------------------------
# DIFF SERIES
diffit <- function(x) { {{x}} - lag({{x}}) }
ronaDiff <- ronaSeriesesTot %>%
mutate(across(starts_with("x"), ~diffit(.) ))
# TRANSPOSE ronaDiff TO SECTIONS, JOIN TO MAKE rona
ronaAllSections <- ronaDiff %>%
pivot_longer(cols = starts_with("x"), names_to = "fips2") %>%
pivot_wider(id_cols = fips2,
names_from = week_DateW,
values_from = "value") %>%
left_join(ronaSectionsTot, by="fips2") %>%
left_join(fips_fips2, by = "fips2") %>%
column_to_rownames(var = "fips2") %>%
left_join(rawData[["popu"]], by="fips") %>%
left_join(rawData[["area"]], by="fips") %>%
left_join(rawData[["vote"]], by="fips") # %>%
rm(fips_fips2, rawData, ronaSectionsTot, ronaSeriesesTot, ronaTall) #, ronaDiff)
# REMOVE OBSERVATIONS WITH pop2019 == NA
ronaAllSections <- ronaAllSections %>% filter(!is.na(pop2019))
# ronaVote
# Regressing panel data on COVID outcomes on 2020 election data
library(data.table)
library(broom)
library(tidyverse)
setwd("~/git/ronaVote")
# GET DATA, REMOVE ROWS W/ UNKNOWN FIPS, CONVERT>WEEKLY OBSERVATIONS --------  later: pad fips with zeroes
# GET DATA
getData <- function(){
pathRona <- "~/git/ronaVote/data/rona/NYT/us-counties.csv"
pathArea <- "~/git/ronaVote/data/rona/CountiesLandArea/LND01.csv"
pathPop <-  "~/git/ronaVote/data/rona/USDA_PopulationData/PopEst2019.csv"
pathVote <- "~/git/ronaVote/data/vote/NYT/presidential.csv"
ronaDays <- fread(pathRona, select = grep(        "fips|date|cases",
names(fread(pathRona, nrow = 0L))))
ronaDays <- rename(ronaDays, casesTot = cases)    # renamed "cases" to "casesTot"
area <- fread(pathArea, select = grep(            "fips|mi2",
names(fread(pathArea, nrow = 0L))))
popu <- fread(pathPop, select = grep(             "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(            "fips|margin2020|votes$",
names(fread(pathVote, nrow = 0L))))
return(list(ronaDays=ronaDays, area=area, popu=popu, vote=vote))
}
rawData <- getData()
# REMOVE OBSERVATIONS WITH UNKNOWN COUNTY FIPS
rawData <- rawData %>%
map(function(x) { filter(x, !is.na(fips)) })
# DAYS TO WEEKS
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%    # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                                 # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%               # Reconstruct uniform dates for all rows in each week
mutate(week_DateT = paste("T", gsub("-", "_", weekDate), sep="")) %>%         # for casesDiff row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(week_DateW = paste("W", gsub("-", "_", weekDate), sep="")) %>%         # for casesTot row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(fips2 = paste("x", fips, sep = ""))                                    # for col or row names
weekDates <- distinct(ronaTall, week_DateT, week_DateW, weekDate) #THIS IS NEW
fips_fips2 <- distinct(ronaTall, fips, fips2, .keep_all = FALSE)                # keep fips fips2 dictionary
# TIDY casesTot: WIDEN, NA'S-TO-ZEROES -----------------------------------------
ronaSectionsTot <- ronaTall  %>%                                                # WIDEN FOR COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = fips2,
names_from = week_DateT,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("T"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
ronaSeriesesTot <- ronaTall  %>%                                                # WIDEN FOR COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = week_DateW,
names_from = fips2,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("x"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
# DIFF SERIES, TRANSPOSE TO SECTIONS, JOIN -------------------------------------
# DIFF SERIES
diffit <- function(x) { {{x}} - lag({{x}}) }
ronaDiff <- ronaSeriesesTot %>%
mutate(across(starts_with("x"), ~diffit(.) ))
# TRANSPOSE ronaDiff TO SECTIONS, JOIN TO MAKE rona
ronaAllSections <- ronaDiff %>%
pivot_longer(cols = starts_with("x"), names_to = "fips2") %>%
pivot_wider(id_cols = fips2,
names_from = week_DateW,
values_from = "value") %>%
left_join(ronaSectionsTot, by="fips2") %>%
left_join(fips_fips2, by = "fips2") %>%
column_to_rownames(var = "fips2") %>%
left_join(rawData[["popu"]], by="fips") %>%
left_join(rawData[["area"]], by="fips") %>%
left_join(rawData[["vote"]], by="fips") # %>%
rm(fips_fips2, rawData, ronaSectionsTot, ronaSeriesesTot, ronaTall) #, ronaDiff)
# REMOVE OBSERVATIONS WITH pop2019 == NA
ronaAllSections <- ronaAllSections %>% filter(!is.na(pop2019))
# CONSTRUCT CALCULATED VARIABLES INCLUDING CASES-PER-CAPITA --------------------
rona <- ronaAllSections %>%
mutate(mi2 = ifelse(mi2 == 0, NA, mi2)) %>%               # area in sq. mi.   # ?? WHAT ARE THE ZERO-AREA COUNTIES ??
mutate(popMi2 = (pop2019 / mi2)) %>%                      # pop / sq. mi/     # Calculate population density of counties
mutate(across(starts_with("T"), function(x) {x/pop2019/100000} )) %>%         # Make total cases / 100,000 population variables
mutate(across(starts_with("W"), function(x) {x/pop2019/100000} ))         # "    (weekly new cases)  "     "      "
rona
rona$margin2020
# HISTOGRAM OF ELECTION MARGINS BY POPULATION
rona %>% ggplot(aes(x = margin2020)) + geom_histogram()
# HISTOGRAM OF ELECTION MARGINS BY POPULATION
rona %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram()
# HISTOGRAM OF ELECTION MARGINS BY POPULATION
rona %>%
arrange(margin2020) %>%
mutate(cumSumPop = cumsum(pop2019)) %>%
print
# HISTOGRAM OF ELECTION MARGINS BY POPULATION
rona %>%
arrange(margin2020) %>%
mutate(cumSumPop = cumsum(pop2019)) %>%
tail(pop2019)
# HISTOGRAM OF ELECTION MARGINS BY POPULATION
rona %>%
arrange(margin2020) %>%
mutate(cumSumPop = cumsum(pop2019)) %>%
tail(pop2019)
# HISTOGRAM OF ELECTION MARGINS BY POPULATION
rona %>%
arrange(margin2020) %>%
mutate(cumSumPop = cumsum(pop2019)) %>%
tail(., pop2019)
# HISTOGRAM OF ELECTION MARGINS BY POPULATION
rona %>%
arrange(margin2020) %>%
mutate(cumSumPop = cumsum(pop2019)) %>%
tail(., pop2019)
# HISTOGRAM OF ELECTION MARGINS BY POPULATION
rona %>%
arrange(margin2020) %>%
mutate(cumSumPop = cumsum(pop2019)) %>%
tail
rona %>% summary
summary(rona, sum())
?summary
summarize(rona, sum())
?summarize
summarize(rona, pop2019, sum())
summarize(rona, totalPop = sum(pop2019))
totalPop = sum(rona$pop2019)
totalPop
# HISTOGRAM OF ELECTION MARGINS BY POPULATION
tP = sum(rona$pop2019)                                      # total Population
rona %>%
arrange(margin2020) %>%
mutate(cSP = cumsum(pop2019)) %>%                         # cumulative Sum of Population
mutate(qtile = ifelse(cP>tP*.75,4, ifelse(cP>tP*.5,3, ifelse(cP>tP*.25,2, 1))))
rona %>%
arrange(margin2020) %>%
mutate(cP = cumsum(pop2019)) %>%                         # cumulative Sum of Population
mutate(qtile = ifelse(cP>tP*.75,4, ifelse(cP>tP*.5,3, ifelse(cP>tP*.25,2, 1))))
tail(rona)
rona$qtile
rona$cP
rona2 <- rona %>%
arrange(margin2020) %>%
mutate(cP = cumsum(pop2019)) %>%                         # cumulative Sum of Population
mutate(qtile = ifelse(cP>tP*.75,4, ifelse(cP>tP*.5,3, ifelse(cP>tP*.25,2, 1))))
rona2$qtile
rona2$cP
tail(rona2$cP)
rona2$cP
rona2 %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram()
rona2 %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram() +
geom_vline(xintercept=tP*.25, color="red", linetype="dashed", size=1) +
geom_vline(xintercept=tP*.5, color="red", linetype="dashed", size=1) +
geom_vline(xintercept=tP*.75, color="red", linetype="dashed", size=1)
rona2 %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram() #+
# HISTOGRAM OF ELECTION MARGINS BY POPULATION
tP = sum(rona$pop2019)                                     # total Population
rona2 <- rona %>%
arrange(margin2020) %>%
mutate(cP = cumsum(pop2019)) %>%                         # cumulative Sum of Population
mutate(margin_qtile = ifelse(cP>tP*.75,4, ifelse(cP>tP*.5,3, ifelse(cP>tP*.25,2, 1))))
rona2 %>%
group_by(margin_qtile) %>%
slice(1) %>%
ungroup %>%
print
rona3 <- rona2 %>%
group_by(margin_qtile) %>%
slice(1) %>%
ungroup %>%
print
rona3
str(rona3)
rona3["margin2020"]
ronaQuartiles <- rona2 %>%
group_by(margin_qtile) %>%
slice(1) %>%
ungroup %>%
print
rm(rona3)
rona <- ronaAllSections %>%
mutate(mi2 = ifelse(mi2 == 0, NA, mi2)) %>%               # area in sq. mi.   # ?? WHAT ARE THE ZERO-AREA COUNTIES ??
mutate(popMi2 = (pop2019 / mi2)) %>%                      # pop / sq. mi/     # Calculate population density of counties
mutate(across(starts_with("T"), function(x) {x/pop2019/100000} )) %>%         # Make total cases / 100,000 population variables
mutate(across(starts_with("W"), function(x) {x/pop2019/100000} )) %>%         # "    (weekly new cases)  "     "      "
arrange(margin2020) %>%                                  # put counties in order of vote margin
mutate(cP = cumsum(pop2019)) %>%                         # new column = cumulative Sum of Population in order of vote margin
mutate(margin_qtile = ifelse(cP>tP*.75,4, ifelse(cP>tP*.5,3, ifelse(cP>tP*.25,2, 1)))) # label counties by their vote margin quartile (pop-weighted)
ronaQuartiles <- rona %>%
group_by(margin_qtile) %>%
slice(1) %>%
ungroup %>%
print
rona2 %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram() #+
rona2 %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram() #+
rona2 %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram() +
geom_vline(xintercept={{ronaQuartiles$margin2020[2]}}, color="red", linetype="dashed", size=1) +
geom_vline(xintercept={{ronaQuartiles$margin2020[2]}}, color="red", linetype="dashed", size=1) +
geom_vline(xintercept={{ronaQuartiles$margin2020[2]}}, color="red", linetype="dashed", size=1)
rona2 %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram() +
geom_vline(xintercept={{ronaQuartiles$margin2020[2]}}, color="red", linetype="dashed", size=1) +
geom_vline(xintercept={{ronaQuartiles$margin2020[3]}}, color="red", linetype="dashed", size=1) +
geom_vline(xintercept={{ronaQuartiles$margin2020[4]}}, color="red", linetype="dashed", size=1)
rona2 %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram() +
geom_vline(xintercept={{ronaQuartiles$margin2020[2]}}) +
geom_vline(xintercept={{ronaQuartiles$margin2020[3]}}, color="red", linetype="dashed", size=1) +
geom_vline(xintercept={{ronaQuartiles$margin2020[4]}}, color="red", linetype="dashed", size=1)
rona2 %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram() +
geom_vline(xintercept={{ronaQuartiles$margin2020[2]}}) +
geom_vline(xintercept={{ronaQuartiles$margin2020[3]}}) +
geom_vline(xintercept={{ronaQuartiles$margin2020[4]}}, size=.5)
rona2 %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram() +
geom_vline(xintercept={{ronaQuartiles$margin2020[2]}}) +
geom_vline(xintercept={{ronaQuartiles$margin2020[3]}}) +
geom_vline(xintercept={{ronaQuartiles$margin2020[4]}}, size=.1)
rona2 %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram() +
geom_vline(xintercept={{ronaQuartiles$margin2020[2]}}) +
geom_vline(xintercept={{ronaQuartiles$margin2020[3]}}) +
geom_vline(xintercept={{ronaQuartiles$margin2020[4]}}, size=.3)
rona2 %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram() +
geom_vline(xintercept={{ronaQuartiles$margin2020[2]}}) +
geom_vline(xintercept={{ronaQuartiles$margin2020[3]}}) +
geom_vline(xintercept={{ronaQuartiles$margin2020[4]}}, size=.4)
rona2 %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram() +
geom_vline(xintercept={{ronaQuartiles$margin2020[2]}}) +
geom_vline(xintercept={{ronaQuartiles$margin2020[3]}}) +
geom_vline(xintercept={{ronaQuartiles$margin2020[4]}}, size=.3)
rona2 %>% ggplot(aes(x = margin2020, y = ..density.., weight = pop2019)) + geom_histogram() +
geom_vline(xintercept={{ronaQuartiles$margin2020[2]}}, size=.3) +
geom_vline(xintercept={{ronaQuartiles$margin2020[3]}}, size=.3) +
geom_vline(xintercept={{ronaQuartiles$margin2020[4]}}, size=.3)
help.start()
x = rnorm(50)
x
y = rnorm(x)
y
help(rnorm)
