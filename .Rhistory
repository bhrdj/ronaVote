values_from = candidatevotes,
id_cols = -c(party, candidatevotes, candidate))  %>%
group_by(fips) %>%
summarize(DEMOCRAT = sum(DEMOCRAT),
REPUBLICAN = sum(REPUBLICAN),
county_name = unique(county_name),
totalvotes = unique(totalvotes)) %>%
mutate(DJT_Margin = (REPUBLICAN - DEMOCRAT) / totalvotes)
# TIDY casesTot: WIDEN, NA'S-TO-ZEROES -----------------------------------------
ronaSectionsTot <- ronaTall  %>%                                                # WIDEN rona FOR TOTAL CASES COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = fipsText,                                                # ONE ROW FOR EACH FIPS COUNTY
names_from = week_DateT,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("T"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
# JOIN WITH popu AND vote_wide, CLEAN, ADD COLUMN CASES-PER-CAPITA -------------
# REMOVE OTHER
rona <- ronaSectionsTot %>%
left_join(fips_fipsText, by = "fipsText") %>%
column_to_rownames(var = "fipsText") %>%
left_join(rawData[["popu"]], by="fips") %>%
left_join(vote_wide, by="fips")  %>%
filter(!is.na(pop2019)) %>%
mutate(across(starts_with("T"), function(x) {x/pop2019/100000} ))
rm(fips_fipsText, rawData, ronaSectionsTot, ronaTall)
# RUN REGRESSIONS --------------------------------------------------------------
lm_allT <-  map(select(rona, starts_with("T")),
function(yvar) {lm(yvar ~ DJT_Margin, rona)} ) %>%
# GET REGRESSION OUTPUT --------------------------------------------------------
lm_outT <- map(lm_allT,
function(an_lm) {
c( tidy(an_lm)$estimate[2],
glance(an_lm)$r.squared,
glance(an_lm)$p.value )
})
# PROCESS REGRESSION OUTPUT ----------------------------------------------------
lm_dfT <- as.data.frame(do.call(rbind, lm_outT))                                 # Data frame of Total Cases
colnames(lm_dfT) <- c("Correlation_MoreTrumpMargin_MoreCovid", "RSquared", "PValue")
lm_dfT2 <- lm_dfT %>%
rownames_to_column(var = "week_DateT") %>%
left_join(weekDates, by = "week_DateT") %>%
filter(weekDate > as.Date("2020-04-12"))
# ronaVoteShiny.R
# Ongoing COVID and the 2020 USA Election: Time Trends in a County Correlation
# CODE AND INFO FOR LATER ------------------------------------------------------
# pathRona <- "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
# pathVote <- "https://raw.githubusercontent.com/bhrdj/ronaVote/main/data/vote/Harvard/countypres_2000-2020.csv"
# pathPop <- "https://raw.githubusercontent.com/bhrdj/ronaVote/main/data/countyData/USDA_PopulationData/PopEst2019.csv"
# library(rsconnect)
# rsconnect::deployApp('~/git/RmdSandbox/')
# https://bhrdj.shinyapps.io/rmdsandbox/
# https://www.shinyapps.io/admin/#/dashboard
# RUN THESE TO CLEAR LOCAL DATA BUILDING UP IN R WORKSPACE
# rm(list = ls())
# .rs.restartR()
# IMPORTING LIBRARIES ----------------------------------------------------------
library(data.table)
library(broom)
library(tidyverse)
library(shiny)
library(bslib)
library(thematic)
# IMPORTING DATA ---------------------------------------------------------------
pathRona <- "./data/rona/NYT/us-counties_panel_2021-08-02.csv"
pathVote <- "./data/vote/Harvard/countypres_2000-2020.csv"
pathPop <- "./data/countyData/USDA_PopulationData/PopEst2019.csv"
ronaDays <- fread(pathRona, select = grep(  "fips|date|cases",
names(fread(pathRona, nrow = 0L)))) %>%
rename(casesTot = cases)
popu <- fread(pathPop, select = grep(       "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(      "year|party|mode|candidate|county_name|county_fips|candidatevotes|totalvotes",
names(fread(pathVote, nrow = 0L)))) %>%
rename(fips = county_fips)
rawData <- list(ronaDays=ronaDays, popu=popu, vote=vote) %>%                    # Clean up the workspace
map(function(x) { filter(x, !is.na(fips)) })
rm(pathRona, pathVote, pathPop, ronaDays, popu, vote)
# ORGANIZE AND CLEAN TALL (MELTED) DATA ----------------------------------------
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%  # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                               # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%             # Reconstruct uniform dates for all rows in each week
mutate(week_DateT = paste("T", gsub("-", "_", weekDate), sep="")) %>%       # for casesDiff row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(fipsText = paste("x", fips, sep = ""))                                  # for col or row names
weekDates <- distinct(ronaTall, week_DateT, weekDate) #THIS IS NEW
fips_fipsText <- distinct(ronaTall, fips, fipsText, .keep_all = FALSE)                # keep fips fipsText dictionary
# TIDY vote: WIDEN BY candidate ------------------------------------------------
vote_wide <- rawData[["vote"]] %>%
filter(year == 2020) %>%
select(-c(year)) %>%
filter((candidate != "JO JORGENSEN") & (candidate != "OTHER")) %>%
pivot_wider(names_from = party,
values_from = candidatevotes,
id_cols = -c(party, candidatevotes, candidate))  %>%
group_by(fips) %>%
summarize(DEMOCRAT = sum(DEMOCRAT),
REPUBLICAN = sum(REPUBLICAN),
county_name = unique(county_name),
totalvotes = unique(totalvotes)) %>%
mutate(DJT_Margin = (REPUBLICAN - DEMOCRAT) / totalvotes)
# TIDY casesTot: WIDEN, NA'S-TO-ZEROES -----------------------------------------
ronaSectionsTot <- ronaTall  %>%                                                # WIDEN rona FOR TOTAL CASES COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = fipsText,                                                # ONE ROW FOR EACH FIPS COUNTY
names_from = week_DateT,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("T"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
# JOIN WITH popu AND vote_wide, CLEAN, ADD COLUMN CASES-PER-CAPITA -------------
# REMOVE OTHER
rona <- ronaSectionsTot %>%
left_join(fips_fipsText, by = "fipsText") %>%
column_to_rownames(var = "fipsText") %>%
left_join(rawData[["popu"]], by="fips") %>%
left_join(vote_wide, by="fips")  %>%
filter(!is.na(pop2019)) %>%
mutate(across(starts_with("T"), function(x) {x/pop2019/100000} ))
rm(fips_fipsText, rawData, ronaSectionsTot, ronaTall)
# RUN REGRESSIONS --------------------------------------------------------------
lm_allT <-  map(select(rona, starts_with("T")),
function(yvar) {lm(yvar ~ DJT_Margin, rona)} )
# GET REGRESSION OUTPUT --------------------------------------------------------
lm_outT <- map(lm_allT,
function(an_lm) {
c( tidy(an_lm)$estimate[2],
glance(an_lm)$r.squared,
glance(an_lm)$p.value )
})
# PROCESS REGRESSION OUTPUT ----------------------------------------------------
lm_dfT <- as.data.frame(do.call(rbind, lm_outT))                                 # Data frame of Total Cases
colnames(lm_dfT) <- c("Correlation_MoreTrumpMargin_MoreCovid", "RSquared", "PValue")
lm_dfT2 <- lm_dfT %>%
rownames_to_column(var = "week_DateT") %>%
left_join(weekDates, by = "week_DateT") %>%
filter(weekDate > as.Date("2020-04-12"))
lm_allT
str(lm_allT)
lm_allT[0]
head(lm_allT)
head(lm_allT)
tail(lm_allT)
rona
gc()
rm(list = ls())
.rs.restartR()
# IMPORTING LIBRARIES ----------------------------------------------------------
library(data.table)
library(broom)
library(tidyverse)
library(shiny)
library(bslib)
library(thematic)
# IMPORTING DATA ---------------------------------------------------------------
pathRona <- "./data/rona/NYT/us-counties_panel_2021-08-02.csv"
pathVote <- "./data/vote/Harvard/countypres_2000-2020.csv"
pathPop <- "./data/countyData/USDA_PopulationData/PopEst2019.csv"
ronaDays <- fread(pathRona, select = grep(  "fips|date|cases",
names(fread(pathRona, nrow = 0L)))) %>%
rename(casesTot = cases)
popu <- fread(pathPop, select = grep(       "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(      "year|party|mode|candidate|county_name|county_fips|candidatevotes|totalvotes",
names(fread(pathVote, nrow = 0L)))) %>%
rename(fips = county_fips)
rawData <- list(ronaDays=ronaDays, popu=popu, vote=vote) %>%                    # Clean up the workspace
map(function(x) { filter(x, !is.na(fips)) })
rm(pathRona, pathVote, pathPop, ronaDays, popu, vote)
# ORGANIZE AND CLEAN TALL (MELTED) DATA ----------------------------------------
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%  # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                               # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%             # Reconstruct uniform dates for all rows in each week
mutate(week_DateT = paste("T", gsub("-", "_", weekDate), sep="")) %>%       # for casesDiff row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(fipsText = paste("x", fips, sep = ""))                                  # for col or row names
weekDates <- distinct(ronaTall, week_DateT, weekDate) #THIS IS NEW
fips_fipsText <- distinct(ronaTall, fips, fipsText, .keep_all = FALSE)                # keep fips fipsText dictionary
# TIDY vote: WIDEN BY candidate ------------------------------------------------
vote_wide <- rawData[["vote"]] %>%
filter(year == 2020) %>%
select(-c(year)) %>%
filter((candidate != "JO JORGENSEN") & (candidate != "OTHER")) %>%
pivot_wider(names_from = party,
values_from = candidatevotes,
id_cols = -c(party, candidatevotes, candidate))  %>%
group_by(fips) %>%
summarize(DEMOCRAT = sum(DEMOCRAT),
REPUBLICAN = sum(REPUBLICAN),
county_name = unique(county_name),
totalvotes = unique(totalvotes)) %>%
mutate(DJT_Margin = (REPUBLICAN - DEMOCRAT) / totalvotes)
# TIDY casesTot: WIDEN, NA'S-TO-ZEROES -----------------------------------------
ronaSectionsTot <- ronaTall  %>%                                                # WIDEN rona FOR TOTAL CASES COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = fipsText,                                                # ONE ROW FOR EACH FIPS COUNTY
names_from = week_DateT,
values_from = casesTot) %>%                                       # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("T"), ~replace_na(., 0)))                           # REPLACE casesTot NA'S WITH ZEROES
# JOIN WITH popu AND vote_wide, CLEAN, ADD COLUMN CASES-PER-CAPITA -------------
# REMOVE OTHER
rona <- ronaSectionsTot %>%
left_join(fips_fipsText, by = "fipsText") %>%
column_to_rownames(var = "fipsText") %>%
left_join(rawData[["popu"]], by="fips") %>%
left_join(vote_wide, by="fips")  %>%
filter(!is.na(pop2019)) %>%
mutate(across(starts_with("T"), function(x) {x/pop2019/100000} ))
rm(fips_fipsText, rawData, ronaTall) #,  ronaSectionsTot)
# RUN REGRESSIONS --------------------------------------------------------------
lm_allT <-  map(select(rona, starts_with("T")),
function(yvar) {lm(yvar ~ DJT_Margin, rona)} )
# GET REGRESSION OUTPUT --------------------------------------------------------
# UNITS OF ESTIMATE:
#   Y: vote margin (decimal)   X: cases/population
lm_outT <- map(lm_allT,
function(an_lm) {
c( tidy(an_lm)$estimate[2],
glance(an_lm)$r.squared,
glance(an_lm)$p.value )
})
# PROCESS REGRESSION OUTPUT ----------------------------------------------------
lm_dfT <- as.data.frame(do.call(rbind, lm_outT))                                 # Data frame of Total Cases
colnames(lm_dfT) <- c("Correlation_MoreTrumpMargin_MoreCovid", "RSquared", "PValue")
lm_dfT2 <- lm_dfT %>%
rownames_to_column(var = "week_DateT") %>%
left_join(weekDates, by = "week_DateT") %>%
filter(weekDate > as.Date("2020-04-12"))
ronaSectionsTot
tail(ronaSectionsTot)
str(ronaSectionsTot)
ronaSectionsTot$T2021_08_01
ronaSectionsTot[T2021_08_01, popu]
ronaSectionsTot["T2021_08_01", "popu"]
str(ronaSectionsTot)
rona %>% select(starts_with("p"))
rona %>% select(starts_with("p")) %>% head()
ronaSectionsTot["T2021_08_01", "pop2019"]
rona["T2021_08_01", "pop2019"]
rona["T2021_08_01"]
rona["pop2019"]
rona["pop2019"]
tail(rona["pop2019"])
tail(rona["T2021_08_01"])
tail(ronaSectionsTot["T2021_08_01"])
ronaSectionsTot["T2021_08_01"]
tail(ronaSectionsTot["T2021_08_01"])
tail(ronaSectionsTot["T2021_08_01"])
tail(ronaSectionsTot["pop2019"])
runApp('ronaVoteShiny.R')
tail(ronaSectionsTot["pop2019"])
runApp('ronaVoteShiny.R')
tail(ronaSectionsTot$T2021_08_01)
tail(ronaSectionsTot$pop2019)
tail(ronaSectionsTot$popu)
str(ronaSectionsTot)
# ronaVoteShiny.R
# Ongoing COVID and the 2020 USA Election: Time Trends in a County Correlation
# CODE AND INFO FOR LATER ------------------------------------------------------
# pathRona <- "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
# pathVote <- "https://raw.githubusercontent.com/bhrdj/ronaVote/main/data/vote/Harvard/countypres_2000-2020.csv"
# pathPop <- "https://raw.githubusercontent.com/bhrdj/ronaVote/main/data/countyData/USDA_PopulationData/PopEst2019.csv"
# library(rsconnect)
# rsconnect::deployApp('~/git/RmdSandbox/')
# https://bhrdj.shinyapps.io/rmdsandbox/
# https://www.shinyapps.io/admin/#/dashboard
# RUN THESE TO CLEAR LOCAL DATA BUILDING UP IN R WORKSPACE
# rm(list = ls())
# .rs.restartR()
# IMPORTING LIBRARIES ----------------------------------------------------------
library(data.table)
library(broom)
library(tidyverse)
library(shiny)
library(bslib)
library(thematic)
# IMPORTING DATA ---------------------------------------------------------------
pathRona <- "./data/rona/NYT/us-counties_panel_2021-08-02.csv"
pathVote <- "./data/vote/Harvard/countypres_2000-2020.csv"
pathPop <- "./data/countyData/USDA_PopulationData/PopEst2019.csv"
ronaDays <- fread(pathRona, select = grep(  "fips|date|cases",
names(fread(pathRona, nrow = 0L)))) %>%
rename(casesTot = cases)
popu <- fread(pathPop, select = grep(       "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(      "year|party|mode|candidate|county_name|county_fips|candidatevotes|totalvotes",
names(fread(pathVote, nrow = 0L)))) %>%
rename(fips = county_fips)
rawData <- list(ronaDays=ronaDays, popu=popu, vote=vote) %>%                    # Clean up the workspace
map(function(x) { filter(x, !is.na(fips)) })
rm(pathRona, pathVote, pathPop, ronaDays, popu, vote)
# ORGANIZE AND CLEAN TALL (MELTED) DATA ----------------------------------------
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%  # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                               # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%             # Reconstruct uniform dates for all rows in each week
mutate(week_DateT = paste("T", gsub("-", "_", weekDate), sep="")) %>%       # for casesDiff row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(fipsText = paste("x", fips, sep = ""))                                  # for col or row names
weekDates <- distinct(ronaTall, week_DateT, weekDate) #THIS IS NEW
fips_fipsText <- distinct(ronaTall, fips, fipsText, .keep_all = FALSE)                # keep fips fipsText dictionary
# TIDY vote: WIDEN BY candidate ------------------------------------------------
vote_wide <- rawData[["vote"]] %>%
filter(year == 2020) %>%
select(-c(year)) %>%
filter((candidate != "JO JORGENSEN") & (candidate != "OTHER")) %>%
pivot_wider(names_from = party,
values_from = candidatevotes,
id_cols = -c(party, candidatevotes, candidate))  %>%
group_by(fips) %>%
summarize(DEMOCRAT = sum(DEMOCRAT),
REPUBLICAN = sum(REPUBLICAN),
county_name = unique(county_name),
totalvotes = unique(totalvotes)) %>%
mutate(DJT_Margin = (REPUBLICAN - DEMOCRAT) / totalvotes)
# TIDY casesTot: WIDEN, NA'S-TO-ZEROES, JOIN WITH popu AND vote_wide------------
ronaSectionsTot <- ronaTall  %>%                                                # WIDEN rona FOR TOTAL CASES COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = fipsText,                                             # ONE ROW FOR EACH FIPS COUNTY
names_from = week_DateT,
values_from = casesTot) %>%                                     # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("T"), ~replace_na(., 0))) %>%                     # REPLACE casesTot NA'S WITH ZEROES
left_join(fips_fipsText, by = "fipsText") %>%
column_to_rownames(var = "fipsText") %>%
left_join(rawData[["popu"]], by="fips") %>%
left_join(vote_wide, by="fips")  %>%
filter(!is.na(pop2019))
# ADD COLUMN CASES-PER-CAPITA -------------
# REMOVE OTHER VARS
rona <- ronaSectionsTot %>%
mutate(across(starts_with("T"), function(x) {x/pop2019/100000} ))
rm(fips_fipsText, rawData, ronaTall) #,  ronaSectionsTot)
# RUN REGRESSIONS --------------------------------------------------------------
lm_allT <-  map(select(rona, starts_with("T")),
function(yvar) {lm(yvar ~ DJT_Margin, rona)} )
# GET REGRESSION OUTPUT --------------------------------------------------------
# UNITS OF ESTIMATE:
#   Y: vote margin (decimal)   X: cases/population
lm_outT <- map(lm_allT,
function(an_lm) {
c( tidy(an_lm)$estimate[2],
glance(an_lm)$r.squared,
glance(an_lm)$p.value )
})
# PROCESS REGRESSION OUTPUT ----------------------------------------------------
lm_dfT <- as.data.frame(do.call(rbind, lm_outT))                                 # Data frame of Total Cases
colnames(lm_dfT) <- c("Correlation_MoreTrumpMargin_MoreCovid", "RSquared", "PValue")
lm_dfT2 <- lm_dfT %>%
rownames_to_column(var = "week_DateT") %>%
left_join(weekDates, by = "week_DateT") %>%
filter(weekDate > as.Date("2020-04-12"))
tail(ronaSectionsTot$pop2019 )
tail(ronaSectionsTot$T2021_08_01)
tail(rona$T2021_08_01)
tail(rona$county_name)
tail(rona$state)
44/1332
runApp('ronaVoteShiny.R')
runApp('ronaVoteShiny.R')
CovidPerCap_vs_TrumpMargin <- lm_dfT2 %>%
ggplot(aes(x=weekDate, y= 1/Correlation_MoreTrumpMargin_MoreCovid)) + geom_point()
runApp('ronaVoteShiny.R')
# ronaVoteShiny.R
# Ongoing COVID and the 2020 USA Election: Time Trends in a County Correlation
# CODE AND INFO FOR LATER ------------------------------------------------------
# pathRona <- "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
# pathVote <- "https://raw.githubusercontent.com/bhrdj/ronaVote/main/data/vote/Harvard/countypres_2000-2020.csv"
# pathPop <- "https://raw.githubusercontent.com/bhrdj/ronaVote/main/data/countyData/USDA_PopulationData/PopEst2019.csv"
# library(rsconnect)
# rsconnect::deployApp('~/git/RmdSandbox/')
# https://bhrdj.shinyapps.io/rmdsandbox/
# https://www.shinyapps.io/admin/#/dashboard
# RUN THESE TO CLEAR LOCAL DATA BUILDING UP IN R WORKSPACE
# rm(list = ls())
# .rs.restartR()
# IMPORTING LIBRARIES ----------------------------------------------------------
library(data.table)
library(broom)
library(tidyverse)
library(shiny)
library(bslib)
library(thematic)
# IMPORTING DATA ---------------------------------------------------------------
pathRona <- "./data/rona/NYT/us-counties_panel_2021-08-02.csv"
pathVote <- "./data/vote/Harvard/countypres_2000-2020.csv"
pathPop <- "./data/countyData/USDA_PopulationData/PopEst2019.csv"
ronaDays <- fread(pathRona, select = grep(  "fips|date|cases",
names(fread(pathRona, nrow = 0L)))) %>%
rename(casesTot = cases)
popu <- fread(pathPop, select = grep(       "fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select = grep(      "year|party|mode|candidate|county_name|county_fips|candidatevotes|totalvotes",
names(fread(pathVote, nrow = 0L)))) %>%
rename(fips = county_fips)
rawData <- list(ronaDays=ronaDays, popu=popu, vote=vote) %>%                    # Clean up the workspace
map(function(x) { filter(x, !is.na(fips)) })
rm(pathRona, pathVote, pathPop, ronaDays, popu, vote)
# ORGANIZE AND CLEAN TALL (MELTED) DATA ----------------------------------------
zeroMonday <- as.IDate("2019-12-29")                                            # Base date for counting weeks
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%  # Number the weeks from zeroMonday
distinct(fips, weekNum, .keep_all = TRUE) %>%                               # Remove extra rows after first row/week/county
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%             # Reconstruct uniform dates for all rows in each week
mutate(week_DateT = paste("T", gsub("-", "_", weekDate), sep="")) %>%       # for casesDiff row/colnames: with _ instead of -, +prefix "w" for "week number"
mutate(fipsText = paste("x", fips, sep = ""))                                  # for col or row names
weekDates <- distinct(ronaTall, week_DateT, weekDate) #THIS IS NEW
fips_fipsText <- distinct(ronaTall, fips, fipsText, .keep_all = FALSE)                # keep fips fipsText dictionary
# TIDY vote: WIDEN BY candidate ------------------------------------------------
vote_wide <- rawData[["vote"]] %>%
filter(year == 2020) %>%
select(-c(year)) %>%
filter((candidate != "JO JORGENSEN") & (candidate != "OTHER")) %>%
pivot_wider(names_from = party,
values_from = candidatevotes,
id_cols = -c(party, candidatevotes, candidate))  %>%
group_by(fips) %>%
summarize(DEMOCRAT = sum(DEMOCRAT),
REPUBLICAN = sum(REPUBLICAN),
county_name = unique(county_name),
totalvotes = unique(totalvotes)) %>%
mutate(DJT_Margin = (REPUBLICAN - DEMOCRAT) / totalvotes)
# TIDY casesTot: WIDEN, NA'S-TO-ZEROES, JOIN WITH popu AND vote_wide------------
ronaSectionsTot <- ronaTall  %>%                                                # WIDEN rona FOR TOTAL CASES COLUMNS NAMED BY WEEKDATES
pivot_wider(id_cols = fipsText,                                             # ONE ROW FOR EACH FIPS COUNTY
names_from = week_DateT,
values_from = casesTot) %>%                                     # Only 1 row/county; 1 col/week. Total cases at each week
mutate(across(starts_with("T"), ~replace_na(., 0))) %>%                     # REPLACE casesTot NA'S WITH ZEROES
left_join(fips_fipsText, by = "fipsText") %>%
column_to_rownames(var = "fipsText") %>%
left_join(rawData[["popu"]], by="fips") %>%
left_join(vote_wide, by="fips")  %>%
filter(!is.na(pop2019))
# ADD COLUMN CASES-PER-CAPITA -------------
# REMOVE OTHER VARS
rona <- ronaSectionsTot %>%
mutate(across(starts_with("T"), function(x) {x/pop2019} ))
rm(fips_fipsText, rawData, ronaTall) #,  ronaSectionsTot)
# RUN REGRESSIONS --------------------------------------------------------------
lm_allT <-  map(select(rona, starts_with("T")),
function(yvar) {lm(yvar ~ DJT_Margin, rona)} )
# function(yvar) {lm(yvar ~ DJT_Margin, rona)} )
# GET REGRESSION OUTPUT --------------------------------------------------------
# UNITS OF ESTIMATE:
#   Y: vote margin (decimal)   X: cases/population (1/1)
#
lm_outT <- map(lm_allT,
function(an_lm) {
c( tidy(an_lm)$estimate[2],
glance(an_lm)$r.squared,
glance(an_lm)$p.value )
})
# PROCESS REGRESSION OUTPUT ----------------------------------------------------
lm_dfT <- as.data.frame(do.call(rbind, lm_outT))                                 # Data frame of Total Cases
colnames(lm_dfT) <- c("Correlation_MoreTrumpMargin_MoreCovid", "RSquared", "PValue")
lm_dfT2 <- lm_dfT %>%
rownames_to_column(var = "week_DateT") %>%
left_join(weekDates, by = "week_DateT") %>%
filter(weekDate > as.Date("2020-04-12"))
# PLOT -------------------------------------------------------------------------
TrumpMargin_vs_CovidPerCap <- lm_dfT2 %>%
ggplot(aes(x=weekDate, y=Correlation_MoreTrumpMargin_MoreCovid)) + geom_point()
CovidPerCap_vs_TrumpMargin <- lm_dfT2 %>%
ggplot(aes(x=weekDate, y= 1/Correlation_MoreTrumpMargin_MoreCovid)) + geom_point()
CovidPerCap_vs_TrumpMargin
TrumpMargin_vs_CovidPerCap
mean(rona$T2021_08_01)
mean(ronaSectionsTot$T2021_08_01)
sum(ronaSectionsTot$T2021_08_01)
rona$T2021_08_01
sum(vote_wide$DEMOCRAT) + sum(vote_wide$REPUBLICAN)
sum(ronaSectionsTot$T2021_08_01)
totalCases = sum(ronaSectionsTot$T2021_08_01)
totalVotes = sum(vote_wide$DEMOCRAT) + sum(vote_wide$REPUBLICAN)
lastCorrelation = Correlation_MoreTrumpMargin_MoreCovid["T2021_08_01"]
lastCorrelation = lm_dfT$Correlation_MoreTrumpMargin_MoreCovid["T2021_08_01"]
lastCorrelation
lm_dfT$Correlation_MoreTrumpMargin_MoreCovid
lm_dfT$Correlation_MoreTrumpMargin_MoreCovid[82]
lastCorrelation <- lm_dfT$Correlation_MoreTrumpMargin_MoreCovid[82]
totalCases
totalVotes
lastCorrelation
# if .005 of voters switch their vote, that's a +1% margin
# a correlation of .01 implies that an increase of .01 margin correlates with an increase in .0001 cases per population.
# A correlation of .01 (naively) implies that an increase of 1 in the vote margin correlates with an increase in .01 cases per population.  But the vote margin is only relevant in smaller increments, so we need to divide by 100.
# So we can say that correlation of .01 implies that an increase of .01 margin correlates with an increase in .0001 cases per population.
totalPop <- sum(rona$pop2019)
totalPop
# +.01 margin corresponds to a total of 155,146,377 * .005
# +.0001 cases per population corresponds to 322,793,363 * +.0001
155,146,377 * .005
155146377 * .005
# +.01 margin corresponds to a total of 155,146,377 * .005 = 775,732 votes
322793363 * +.0001
# +.0001 cases per population corresponds to 322,793,363 * +.0001 = 32279 cases
# +.0001 cases per population corresponds to 322,793,363 * +.0001 = 32,279 cases
775732/32279
# 775,732 votes divided by 32,279 cases equals a marginal rate of 775,732 votes per case
# Consider an example county with 10,000 Americans, including 5,000 voters.
# 775,732 votes divided by 32,279 cases equals a marginal rate of about 25 votes per case
# Consider an example county with 10,000 Americans, including 5,000 voters.
# If the county were to move along this margin such there were 25 more REPUBLICAN voters and 25 fewer DEMOCRAT voters, then that would increase the margin by +.01, corresponding to one additional case.
# Consider an example county with 1,000 Americans, including 500 voters.
# Consider an example county with 1,000 Americans, including 500 voters.
# If the county were to move along this margin such there were 25 more REPUBLICAN voters and 25 fewer DEMOCRAT voters, then that would increase the margin by +.01, corresponding to one additional case.
TrumpMargin_vs_CovidPerCap <- lm_dfT2 %>%
ggplot(aes(x=weekDate, y=Correlation_MoreTrumpMargin_MoreCovid)) + geom_point()
TrumpMargin_vs_CovidPerCap + theme_dark()
install.packages("ggdark")
TrumpMargin_vs_CovidPerCap + dark_theme_gray()
library(ggdark)
TrumpMargin_vs_CovidPerCap + dark_theme_gray()
install.packages('rmarkdown')
