# a row for each FIPS county.
# Sum votes for FIPS areas with multiple subareas.
# Calculate vote-margins from vote-counts.
vote_wide <- rawData[["vote"]] %>%
filter(year == 2020) %>%
select(-c(year)) %>%
filter((candidate != "JO JORGENSEN") & (candidate != "OTHER")) %>%
pivot_wider(names_from = party,
values_from = candidatevotes,
id_cols = -c(party, candidatevotes, candidate))  %>%
group_by(fips) %>%
summarize(DEMOCRAT = sum(DEMOCRAT),
REPUBLICAN = sum(REPUBLICAN),
county_name = unique(county_name),
totalvotes = unique(totalvotes)) %>%
mutate(DJT_Margin = (REPUBLICAN - DEMOCRAT) / (REPUBLICAN + DEMOCRAT))
# Tidy COVID data:
# Widen ->
# a column for each week
# a row for each FIPS county.
# Join with population and election data.
# Impute zero-cases for (earlier) weeks where some counties didn't have any cases yet.
ronaSectionsTot_BeforeCleaning <- ronaTall  %>%
pivot_wider(id_cols = fipsText,
names_from = week_DateT,
values_from = casesTot) %>%
mutate(across(starts_with("T", ignore.case=FALSE), ~replace_na(., 0)))  %>%
left_join(fips_fipsText, by = "fipsText") %>%
left_join(rawData[["popu"]], by="fips") %>%
left_join(vote_wide, by="fips") %>%
column_to_rownames(., var = "fipsText")
# FIND UNCLEAN OBSERVATIONS TO BE DROPPED OR REPAIRED
countiesWithNA_somewhere <- ronaSectionsTot_BeforeCleaning %>%
select(c(county_name, DEMOCRAT, REPUBLICAN, totalvotes, pop2019, fips)) %>%
filter(
is.na(DEMOCRAT) |
is.na(REPUBLICAN) |
is.na(totalvotes) |
is.na(fips) |
is.na(pop2019)
)
# VIEW THESE FIPS COUNTIES (MANY SOMEHOW DON'T HAVE NAMES!)
countiesWithNA_somewhere
# DROP THEM
countiesWithNA_fips <- countiesWithNA_somewhere %>%
select("fips")
ronaSectionsTot <- ronaSectionsTot_BeforeCleaning %>%
filter(
!is.na(DEMOCRAT) &
!is.na(REPUBLICAN) &
!is.na(totalvotes) &
!is.na(fips) &
!is.na(pop2019)
)
# STEPS TO FIX:
#   UPDATE TO THE POPULATION DATA BASED ON THE 2020 CENSUS
#   CHECK FOR MORE UPDATES FROM MIT/HARVARD / HOPE THEY FIX THE HOLES IN THEIR ELECTION DATA
#   MANUALLY FIX THE FEW COUNTIES I CAN FROM OTHER DATA ALREADY IN THIS Rmd
#   SLEUTH AROUND MYSELF TO FIND THESE MYSTERY COUNTIES
# Calculate a column for COVID-cases-per-capita.
ronaPerCap <- ronaSectionsTot %>%
mutate(across(starts_with("T", ignore.case=FALSE), function(x) {x/pop2019} ))
# Remove unused variables
rm(rawData) #, ronaTall, ronaSectionsTot)
# Regress COVID cases-per-capita on election data
# One regression for each week
# Each regression across the cross-section of FIPS counties
lm_allT <-  map(select(ronaPerCap, starts_with("T", ignore.case=FALSE)),
function(yvar) {
lm(yvar ~ DJT_Margin, ronaPerCap)
})
# Tidy regression coefficients and other statistical output.
lm_outT <- map(lm_allT,
function(an_lm) {
c( tidy(an_lm)$estimate[2],
glance(an_lm)$r.squared,
glance(an_lm)$p.value )
})
lm_dfT <- as.data.frame(do.call(rbind, lm_outT))
colnames(lm_dfT) <- c("BetaCoeff", "RSquared", "PValue")
# Calc additional national columns for analysis  NOT DONE WITH THIS !!!!!!!!!!!!
nationalSummaries <- ronaSectionsTot %>%
select(c("pop2019", "totalvotes", "REPUBLICAN", "DEMOCRAT")) %>%
mutate(RPlusDVotes= REPUBLICAN + DEMOCRAT) %>%
colSums()
ronaTotalUSA <- ronaSectionsTot %>%
select(starts_with("T", ignore.case=FALSE)) %>%
colSums()
ronaPerCapUSA <- ronaTotalUSA /
# Join additional columns for analysis
timeSeriesResults <- lm_dfT %>%
rownames_to_column(var = "week_DateT") %>%
left_join(weekDates, by = "week_DateT") %>%
add_column(ronaTotalUSA) %>%
column_to_rownames("week_DateT") %>%
filter(weekDate > as.Date("2020-04-12"))
nationalSummaries
ronaPerCapUSA <- ronaTotalUSA / nationalSummaries["pop2019"]
ronaPerCap
ronaPerCapUSA
library(rmarkdown)
library(data.table)
library(broom)
library(tidyverse)
library(ggdark)
# pathRona <- "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
# pathVote <- "https://raw.githubusercontent.com/bhrdj/ronaVote/main/data/vote/Harvard/countypres_2000-2020.csv"
# pathPop <- "https://raw.githubusercontent.com/bhrdj/ronaVote/main/data/countyData/USDA_PopulationData/PopEst2019.csv"
pathRona <- "./data/rona/NYT/us-counties_panel_2021-08-02.csv"
pathVote <- "./data/vote/Harvard/countypres_2000-2020.csv"
pathPop <- "./data/countyData/USDA_PopulationData/PopEst2019.csv"
# Import data
# Remove rows where FIPS data is missing.
ronaDays <- fread(pathRona, select =
grep("fips|date|cases",
names(fread(pathRona, nrow = 0L)))) %>%
rename(casesTot = cases)
popu <- fread(pathPop, select =
grep("fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select =
grep("year|party|mode|candidate|county_name|county_fips|candidatevotes|totalvotes",
names(fread(pathVote, nrow = 0L)))) %>%
rename(fips = county_fips)
rawData <- list(ronaDays=ronaDays, popu=popu, vote=vote) %>%
map(function(x) { filter(x, !is.na(fips)) })
rm(pathRona, pathVote, pathPop, ronaDays, popu, vote)
# Organize and clean tall (melted) COVID data:
# Assign a number to each week starting with 2019-12-29.
# Remove excess rows within weeks.
# Make crosswalks to text-label versions of the numeric dates and FIPS.
zeroMonday <- as.IDate("2019-12-29")
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%
distinct(fips, weekNum, .keep_all = TRUE) %>%
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%
mutate(week_DateT = paste("T", gsub("-", "_", weekDate), sep="")) %>%
mutate(fipsText = paste("x", fips, sep = ""))
weekDates <- distinct(ronaTall, week_DateT, weekDate)
fips_fipsText <- distinct(ronaTall, fips, fipsText, .keep_all = FALSE)
# Tidy election data:
# Widen ->
# a column for each major party,
# a row for each FIPS county.
# Sum votes for FIPS areas with multiple subareas.
# Calculate vote-margins from vote-counts.
vote_wide <- rawData[["vote"]] %>%
filter(year == 2020) %>%
select(-c(year)) %>%
filter((candidate != "JO JORGENSEN") & (candidate != "OTHER")) %>%
pivot_wider(names_from = party,
values_from = candidatevotes,
id_cols = -c(party, candidatevotes, candidate))  %>%
group_by(fips) %>%
summarize(DEMOCRAT = sum(DEMOCRAT),
REPUBLICAN = sum(REPUBLICAN),
county_name = unique(county_name),
totalvotes = unique(totalvotes)) %>%
mutate(DJT_Margin = (REPUBLICAN - DEMOCRAT) / (REPUBLICAN + DEMOCRAT))
# Tidy COVID data:
# Widen ->
# a column for each week
# a row for each FIPS county.
# Join with population and election data.
# Impute zero-cases for (earlier) weeks where some counties didn't have any cases yet.
ronaSectionsTot_BeforeCleaning <- ronaTall  %>%
pivot_wider(id_cols = fipsText,
names_from = week_DateT,
values_from = casesTot) %>%
mutate(across(starts_with("T", ignore.case=FALSE), ~replace_na(., 0)))  %>%
left_join(fips_fipsText, by = "fipsText") %>%
left_join(rawData[["popu"]], by="fips") %>%
left_join(vote_wide, by="fips") %>%
column_to_rownames(., var = "fipsText")
# FIND UNCLEAN OBSERVATIONS TO BE DROPPED OR REPAIRED
countiesWithNA_somewhere <- ronaSectionsTot_BeforeCleaning %>%
select(c(county_name, DEMOCRAT, REPUBLICAN, totalvotes, pop2019, fips)) %>%
filter(
is.na(DEMOCRAT) |
is.na(REPUBLICAN) |
is.na(totalvotes) |
is.na(fips) |
is.na(pop2019)
)
# VIEW THESE FIPS COUNTIES (MANY SOMEHOW DON'T HAVE NAMES!)
countiesWithNA_somewhere
# DROP THEM
countiesWithNA_fips <- countiesWithNA_somewhere %>%
select("fips")
ronaSectionsTot <- ronaSectionsTot_BeforeCleaning %>%
filter(
!is.na(DEMOCRAT) &
!is.na(REPUBLICAN) &
!is.na(totalvotes) &
!is.na(fips) &
!is.na(pop2019)
)
# STEPS TO FIX:
#   UPDATE TO THE POPULATION DATA BASED ON THE 2020 CENSUS
#   CHECK FOR MORE UPDATES FROM MIT/HARVARD / HOPE THEY FIX THE HOLES IN THEIR ELECTION DATA
#   MANUALLY FIX THE FEW COUNTIES I CAN FROM OTHER DATA ALREADY IN THIS Rmd
#   SLEUTH AROUND MYSELF TO FIND THESE MYSTERY COUNTIES
# Calculate a column for COVID-cases-per-capita.
ronaPerCap <- ronaSectionsTot %>%
mutate(across(starts_with("T", ignore.case=FALSE), function(x) {x/pop2019} ))
# Remove unused variables
rm(rawData) #, ronaTall, ronaSectionsTot)
# Regress COVID cases-per-capita on election data
# One regression for each week
# Each regression across the cross-section of FIPS counties
lm_allT <-  map(select(ronaPerCap, starts_with("T", ignore.case=FALSE)),
function(yvar) {
lm(yvar ~ DJT_Margin, ronaPerCap)
})
# Tidy regression coefficients and other statistical output.
lm_outT <- map(lm_allT,
function(an_lm) {
c( tidy(an_lm)$estimate[2],
glance(an_lm)$r.squared,
glance(an_lm)$p.value )
})
lm_dfT <- as.data.frame(do.call(rbind, lm_outT))
colnames(lm_dfT) <- c("BetaCoeff", "RSquared", "PValue")
# Calc additional national columns for analysis  NOT DONE WITH THIS !!!!!!!!!!!!
nationalSummaries <- ronaSectionsTot %>%
select(c("pop2019", "totalvotes", "REPUBLICAN", "DEMOCRAT")) %>%
mutate(RPlusDVotes= REPUBLICAN + DEMOCRAT) %>%
colSums()
ronaTotalUSA <- ronaSectionsTot %>%
select(starts_with("T", ignore.case=FALSE)) %>%
colSums()
ronaPerCapUSA <- ronaTotalUSA / nationalSummaries["pop2019"]
# Join additional columns for analysis
timeSeriesResults <- lm_dfT %>%
rownames_to_column(var = "week_DateT") %>%
left_join(weekDates, by = "week_DateT") %>%
add_column(ronaTotalUSA) %>%
column_to_rownames("week_DateT") %>%
filter(weekDate > as.Date("2020-04-12"))
# Reorder columns
timeSeriesResults <-
timeSeriesResults[c("BetaCoeff", "ronaTotalUSA", "RSquared", "PValue", "weekDate")]
rm(lm_allT, lm_outT, lm_dfT)
title_ = "Magnitude of Coefficients Over Time"
subtitle_ = "(Between Percap COVID and 2020 Vote Margin Across USA Counties)"
caption_ = paste(
"Each data point is a regression coefficient,\n",
"at a particular week, across all USA FIPS counties, between:\n",
"per-capita cumulative COVID cases, and\n",
"the 2019 vote margin.\n\n",
"A coefficient of +0.01 means that:\n",
"an increase of +.01 in vote margin (+Republican) would correlate with\n",
"an increase of +1 COVID case per 10,000 population.")
Margin_vs_CovidPerCap <- timeSeriesResults %>%
ggplot(aes(x=weekDate,
y=BetaCoeff)) +
labs(title=title_, subtitle=subtitle_, caption=caption_) +
xlab("Date") + ylab("Regression Coefficient") +
scale_y_continuous(limits=c(-.01, .02)) +
geom_hline(yintercept = 0, linetype = "solid", color = "white", size = .5) +
geom_point(aes(color=BetaCoeff)) +
scale_colour_gradient(low="#0000ff", high="#ff0000", guide=FALSE)
Margin_vs_CovidPerCap + dark_theme_gray()
nationalSummaries
timeSeriesResults %>%
slice(c(
which.min(BetaCoeff),
which.max(BetaCoeff),
which.min(abs(BetaCoeff)),
n()
))
library(rmarkdown)
library(data.table)
library(broom)
library(tidyverse)
library(ggdark)
# pathRona <- "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
# pathVote <- "https://raw.githubusercontent.com/bhrdj/ronaVote/main/data/vote/Harvard/countypres_2000-2020.csv"
# pathPop <- "https://raw.githubusercontent.com/bhrdj/ronaVote/main/data/countyData/USDA_PopulationData/PopEst2019.csv"
pathRona <- "./data/rona/NYT/us-counties_panel_2021-08-02.csv"
pathVote <- "./data/vote/Harvard/countypres_2000-2020.csv"
pathPop <- "./data/countyData/USDA_PopulationData/PopEst2019.csv"
# Import data
# Remove rows where FIPS data is missing.
ronaDays <- fread(pathRona, select =
grep("fips|date|cases",
names(fread(pathRona, nrow = 0L)))) %>%
rename(casesTot = cases)
popu <- fread(pathPop, select =
grep("fips|state|area_name|pop2019",
names(fread(pathPop, nrow = 0L))))
vote <- fread(pathVote, select =
grep("year|party|mode|candidate|county_name|county_fips|candidatevotes|totalvotes",
names(fread(pathVote, nrow = 0L)))) %>%
rename(fips = county_fips)
rawData <- list(ronaDays=ronaDays, popu=popu, vote=vote) %>%
map(function(x) { filter(x, !is.na(fips)) })
rm(pathRona, pathVote, pathPop, ronaDays, popu, vote)
# Organize and clean tall (melted) COVID data:
# Assign a number to each week starting with 2019-12-29.
# Remove excess rows within weeks.
# Make crosswalks to text-label versions of the numeric dates and FIPS.
zeroMonday <- as.IDate("2019-12-29")
zeroMondayInt <- as.numeric(zeroMonday)
ronaTall <- rawData[["ronaDays"]] %>%
mutate(weekNum = (as.numeric(date) - as.numeric(zeroMondayInt)) %/% 7) %>%
distinct(fips, weekNum, .keep_all = TRUE) %>%
mutate(weekDate = as.IDate(weekNum * 7, origin=zeroMonday)) %>%
mutate(week_DateT = paste("T", gsub("-", "_", weekDate), sep="")) %>%
mutate(fipsText = paste("x", fips, sep = ""))
weekDates <- distinct(ronaTall, week_DateT, weekDate)
fips_fipsText <- distinct(ronaTall, fips, fipsText, .keep_all = FALSE)
# Tidy election data:
# Widen ->
# a column for each major party,
# a row for each FIPS county.
# Sum votes for FIPS areas with multiple subareas.
# Calculate vote-margins from vote-counts.
vote_wide <- rawData[["vote"]] %>%
filter(year == 2020) %>%
select(-c(year)) %>%
filter((candidate != "JO JORGENSEN") & (candidate != "OTHER")) %>%
pivot_wider(names_from = party,
values_from = candidatevotes,
id_cols = -c(party, candidatevotes, candidate))  %>%
group_by(fips) %>%
summarize(DEMOCRAT = sum(DEMOCRAT),
REPUBLICAN = sum(REPUBLICAN),
county_name = unique(county_name),
totalvotes = unique(totalvotes)) %>%
mutate(DJT_Margin = (REPUBLICAN - DEMOCRAT) / (REPUBLICAN + DEMOCRAT))
# Tidy COVID data:
# Widen ->
# a column for each week
# a row for each FIPS county.
# Join with population and election data.
# Impute zero-cases for (earlier) weeks where some counties didn't have any cases yet.
ronaSectionsTot_BeforeCleaning <- ronaTall  %>%
pivot_wider(id_cols = fipsText,
names_from = week_DateT,
values_from = casesTot) %>%
mutate(across(starts_with("T", ignore.case=FALSE), ~replace_na(., 0)))  %>%
left_join(fips_fipsText, by = "fipsText") %>%
left_join(rawData[["popu"]], by="fips") %>%
left_join(vote_wide, by="fips") %>%
column_to_rownames(., var = "fipsText")
# FIND UNCLEAN OBSERVATIONS TO BE DROPPED OR REPAIRED
countiesWithNA_somewhere <- ronaSectionsTot_BeforeCleaning %>%
select(c(county_name, DEMOCRAT, REPUBLICAN, totalvotes, pop2019, fips)) %>%
filter(
is.na(DEMOCRAT) |
is.na(REPUBLICAN) |
is.na(totalvotes) |
is.na(fips) |
is.na(pop2019)
)
# VIEW THESE FIPS COUNTIES (MANY SOMEHOW DON'T HAVE NAMES!)
countiesWithNA_somewhere
# DROP THEM
countiesWithNA_fips <- countiesWithNA_somewhere %>%
select("fips")
ronaSectionsTot <- ronaSectionsTot_BeforeCleaning %>%
filter(
!is.na(DEMOCRAT) &
!is.na(REPUBLICAN) &
!is.na(totalvotes) &
!is.na(fips) &
!is.na(pop2019)
)
# STEPS TO FIX:
#   UPDATE TO THE POPULATION DATA BASED ON THE 2020 CENSUS
#   CHECK FOR MORE UPDATES FROM MIT/HARVARD / HOPE THEY FIX THE HOLES IN THEIR ELECTION DATA
#   MANUALLY FIX THE FEW COUNTIES I CAN FROM OTHER DATA ALREADY IN THIS Rmd
#   SLEUTH AROUND MYSELF TO FIND THESE MYSTERY COUNTIES
# Calculate a column for COVID-cases-per-capita.
ronaPerCap <- ronaSectionsTot %>%
mutate(across(starts_with("T", ignore.case=FALSE), function(x) {x/pop2019} ))
# Remove unused variables
rm(rawData) #, ronaTall, ronaSectionsTot)
# Calc additional national columns for analysis  NOT DONE WITH THIS !!!!!!!!!!!!
nationalSummaries <- ronaSectionsTot %>%
select(c("pop2019", "totalvotes", "REPUBLICAN", "DEMOCRAT")) %>%
mutate(RPlusDVotes= REPUBLICAN + DEMOCRAT) %>%
colSums()
# Calc USA Aggregate COVID Data
ronaTotalUSA <- ronaSectionsTot %>%
select(starts_with("T", ignore.case=FALSE)) %>%
colSums()
# Calc USA Aggregate COVID Data
ronaPerCapUSA <- ronaTotalUSA / nationalSummaries["pop2019"]
# Regress COVID cases-per-capita on election data
# One regression for each week
# Each regression across the cross-section of FIPS counties
lm_allT <-  map(select(ronaPerCap, starts_with("T", ignore.case=FALSE)),
function(yvar) {
lm(yvar ~ DJT_Margin, ronaPerCap)
})
# Tidy regression coefficients and other statistical output.
lm_outT <- map(lm_allT,
function(an_lm) {
c( tidy(an_lm)$estimate[2],
glance(an_lm)$r.squared,
glance(an_lm)$p.value )
})
lm_dfT <- as.data.frame(do.call(rbind, lm_outT))
colnames(lm_dfT) <- c("BetaCoeff", "RSquared", "PValue")
# Join additional columns for analysis
timeSeriesResults <- lm_dfT %>%
rownames_to_column(var = "week_DateT") %>%
left_join(weekDates, by = "week_DateT") %>%
add_column(ronaTotalUSA) %>%
column_to_rownames("week_DateT") %>%
filter(weekDate > as.Date("2020-04-12"))
# Reorder columns
timeSeriesResults <-
timeSeriesResults[c("BetaCoeff", "ronaTotalUSA", "RSquared", "PValue", "weekDate")]
rm(lm_allT, lm_outT, lm_dfT)
title_ = "Magnitude of Coefficients Over Time"
subtitle_ = "(Between Percap COVID and 2020 Vote Margin Across USA Counties)"
caption_ = paste(
"Each data point is a regression coefficient,\n",
"at a particular week, across all USA FIPS counties, between:\n",
"per-capita cumulative COVID cases, and\n",
"the 2019 vote margin.\n\n",
"A coefficient of +0.01 means that:\n",
"an increase of +.01 in vote margin (+Republican) would correlate with\n",
"an increase of +1 COVID case per 10,000 population.")
Margin_vs_CovidPerCap <- timeSeriesResults %>%
ggplot(aes(x=weekDate,
y=BetaCoeff)) +
labs(title=title_, subtitle=subtitle_, caption=caption_) +
xlab("Date") + ylab("Regression Coefficient") +
scale_y_continuous(limits=c(-.01, .02)) +
geom_hline(yintercept = 0, linetype = "solid", color = "white", size = .5) +
geom_point(aes(color=BetaCoeff)) +
scale_colour_gradient(low="#0000ff", high="#ff0000", guide=FALSE)
Margin_vs_CovidPerCap + dark_theme_gray()
nationalSummaries
maxMinTable <- timeSeriesResults %>%
slice(c(
which.min(BetaCoeff),
which.max(BetaCoeff),
which.min(abs(BetaCoeff)),
n()
))
rownames(maxMinTable) <-
c("Max Democrat Coefficient",
"Balanced R/D Coefficients",
"Max Republican Coefficient",
"Current Value")
maxMinTable
maxMinTable <- timeSeriesResults %>%
slice(c(
which.min(BetaCoeff),
which.max(BetaCoeff),
which.min(abs(BetaCoeff)),
n()
)) %>%
mutate(across(c("BetaCoeff", "ronaTotalUSA", "RSquared", "PValue"), map(signif(digits=3))))
maxMinTable <- timeSeriesResults %>%
slice(c(
which.min(BetaCoeff),
which.max(BetaCoeff),
which.min(abs(BetaCoeff)),
n()
)) %>%
mutate(across(c("BetaCoeff", "ronaTotalUSA", "RSquared", "PValue"), map(.f=signif(digits=3))))
maxMinTable <- timeSeriesResults %>%
slice(c(
which.min(BetaCoeff),
which.max(BetaCoeff),
which.min(abs(BetaCoeff)),
n()
)) %>%
mutate(across(c("BetaCoeff", "ronaTotalUSA", "RSquared", "PValue"), ~ signif(.x, digits=3)))
rownames(maxMinTable) <-
c("Peak Dem. Coeff",
"Near-zero Coeff",
"Peak Rep. Coeff",
"Current Status")
maxMinTable
Margin_vs_CovidPerCap <- timeSeriesResults %>%
ggplot(aes(x=weekDate,
y=BetaCoeff)) +
labs(title=title_, subtitle=subtitle_, caption=caption_) +
xlab("Date") + ylab("Regression Coefficient") +
scale_y_continuous(limits=c(-.01, .02)) +
geom_hline(yintercept = 0, linetype = "solid", color = "white", size = .5) +
geom_point(aes(color=BetaCoeff)) +
scale_colour_gradient(low="#0000ff", high="#ff0000", guide=FALSE)
Margin_vs_CovidPerCap + dark_theme_gray()
title_ = "Magnitude of Coefficients Over Time"
subtitle_ = "(Between Percap COVID and 2020 Vote Margin Across USA Counties)"
caption_ = paste(
"Each data point is a regression coefficient,\n",
"at a particular week, across all USA FIPS counties, between:\n",
"per-capita cumulative COVID cases, and\n",
"the 2020 vote margin.\n\n",
"A coefficient of +0.01 means that:\n",
"an increase of +.01 in vote margin (+Republican) would correlate with\n",
"an increase of +1 COVID case per 10,000 population.")
Margin_vs_CovidPerCap <- timeSeriesResults %>%
ggplot(aes(x=weekDate,
y=BetaCoeff)) +
labs(title=title_, subtitle=subtitle_, caption=caption_) +
xlab("Date") + ylab("Regression Coefficient") +
scale_y_continuous(limits=c(-.01, .02)) +
geom_hline(yintercept = 0, linetype = "solid", color = "white", size = .5) +
geom_point(aes(color=BetaCoeff)) +
scale_colour_gradient(low="#0000ff", high="#ff0000", guide=FALSE)
Margin_vs_CovidPerCap + dark_theme_gray()
